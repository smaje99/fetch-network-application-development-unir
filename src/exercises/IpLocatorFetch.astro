---
import Button from "@/components/Button.astro";
import Card from "@/components/card/Card.astro";
import CardContent from "@/components/card/CardContent.astro";
import CardDescription from "@/components/card/CardDescription.astro";
import CardHeader from "@/components/card/CardHeader.astro";
import CardTitle from "@/components/card/CardTitle.astro";
import ExerciseContainer from "@/components/ExerciseContainer.astro";
---

<ExerciseContainer id="peticion-fetch">
  <Card>
    <CardHeader>
      <CardTitle>Localizador de IP</CardTitle>
      <CardDescription>
        Obtén la localización de tu IP actual desde
        <a
          href="http://ip.guide"
          target="_blank"
          rel="noopener noreferrer"
          aria-label="Ir a ip.guide"
          class="link"
        >
          ip.guide
        </a>
      </CardDescription>
    </CardHeader>
    <CardContent>
      <Button id="fetchButton">Obtener localización</Button>

      <span
        id="fetchStatus"
        role="status"
        title="Estado de la petición fetch"
        aria-live="polite"
        aria-label="Estado de la petición fetch"
      >
        Carga no iniciada
      </span>

      <section class="fetch-content">
        <h3>Información de la IP</h3>
        <p id="ip" class="ip-info" role="status" aria-live="polite"></p>
        <p id="city" class="ip-info" role="status" aria-live="polite"></p>
        <p id="isp" class="ip-info" role="status" aria-live="polite"></p>
      </section>

      <section class="fetch-content">
        <h3>Código de estado</h3>
        <p id="status" class="ip-info" role="status" aria-live="polite"></p>
      </section>

      <section class="fetch-content">
        <h3>Cabeceras de respuesta</h3>
        <pre id="headers"></pre>
      </section>
    </CardContent>
  </Card>
</ExerciseContainer>

<script>
  type IpInfo = {
    ip: string;
    network: {
      autonomous_system: {
        name: string;
      };
    };
    location: {
      city: string;
      country: string;
    };
  };

  const button = document.getElementById("fetchButton") as HTMLButtonElement;
  const statusSpan = document.getElementById("fetchStatus") as HTMLSpanElement;
  const ipElement = document.getElementById("ip") as HTMLParagraphElement;
  const cityElement = document.getElementById("city") as HTMLParagraphElement;
  const ispElement = document.getElementById("isp") as HTMLParagraphElement;
  const statusCodeElement = document.getElementById(
    "status"
  ) as HTMLParagraphElement;
  const headersElement = document.getElementById("headers") as HTMLPreElement;
  const ipInfoElements = [
    ipElement,
    cityElement,
    ispElement,
    statusCodeElement,
    headersElement,
  ];

  async function fetchIpData() {
    statusSpan.textContent = "Cargando...";

    button.disabled = true;
    button.textContent = "Cargando...";

    ipInfoElements.forEach((element) => {
      element.classList.add("skeleton");
      element.textContent = "";
    });

    try {
      const response = await fetch("https://ip.guide");

      statusCodeElement.classList.remove("skeleton");

      if (!response.ok) {
        throw new Error(
          `<strong>Error ${response.status}:</strong> ${response.statusText}`
        );
      }

      const data: IpInfo = await response.json();

      ipElement.innerHTML = `<strong>IP:</strong> ${data.ip}`;
      cityElement.innerHTML = `<strong>Ciudad:</strong> ${data.location.city}, ${data.location.country}`;
      ispElement.innerHTML = `<strong>ISP:</strong> ${data.network.autonomous_system.name}`;
      statusCodeElement.innerHTML = `<strong>${response.status}:</strong> ${response.statusText || "Estado no suministrado"}`;
      headersElement.textContent = JSON.stringify(
        Object.fromEntries(response.headers.entries()),
        null,
        2
      );
    } catch (error) {
      statusSpan.textContent = "Error al cargar la información";
    } finally {
      statusSpan.textContent = "Carga completada";
      button.disabled = false;
      button.textContent = "Actualizar localización";
      ipInfoElements.forEach((element) => element.classList.remove("skeleton"));
    }
  }

  button.addEventListener("click", fetchIpData);
</script>

<style>
  .skeleton {
    width: 100%;
    background: var(--blue-chill-200);
    border-radius: 6px;
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  #fetchStatus {
    height: 24px;
    display: inline-flex;
    font-size: 14px;
    color: var(--blue-chill-300);
    margin-left: 12px;
    user-select: none;
  }

  .fetch-content {
    display: grid;
    flex-direction: column;
    gap: 8px;
  }

  .ip-info {
    height: 24px;
  }

  #fetchButton, #fetchStatus  {
    animation: button 0.3s ease;
  }

  #fetchButton {
    width: 186px;
  }

  #headers {
    width: 100%;
    height: 80px;
    overflow: auto;
    font-size: 14px;
    color: var(--blue-chill-900);
    background-color: var(--blue-chill-200);
    border-radius: 6px;
    padding: 8px;
    box-shadow: 0 2px 4px rgb(from white r g b / 10%);
  }

  h3 {
    font-size: 22px;
    margin-top: 16px;
    margin-bottom: 4px;
  }

  .link {
    color: var(--blue-chill-300);
    text-decoration: none;
  }
</style>
